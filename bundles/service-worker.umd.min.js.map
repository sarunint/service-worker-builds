{"version":3,"sources":["/home/sarunint/dev/angular/dist/packages-dist/service-worker/bundles/service-worker.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","serviceWorker","core","Rx","Observable","prototype","this","_angular_core","rxjs_operator_filter","rxjs_operator_take","rxjs_operator_toPromise","rxjs_observable_concat","rxjs_observable_defer","rxjs_observable_fromEvent","rxjs_observable_of","rxjs_observable_throw","rxjs_operator_do","rxjs_operator_map","rxjs_operator_publish","rxjs_operator_switchMap","rxjs_Subject","rxjs_observable_merge","errorObservable","message","defer","_throw","Error","ngswAppInitializer","injector","script","options","app","get","ApplicationRef","navigator","onStable","filter","call","isStable","stable","take","toPromise","then","register","ngswCommChannelFactory","NgswCommChannel","__assign","Object","assign","t","s","i","n","arguments","length","p","hasOwnProperty","ERR_SW_NOT_SUPPORTED","controllerChangeEvents","fromEvent","controllerChanges","map","controller","currentController","of","controllerWithChanges","concat","worker","c","registration","switchMap","getRegistration","rawEvents","rawEventPayload","event","data","eventsUnconnected","events","publish","connect","postMessage","action","payload","sideEffect","_do","sw","postMessageWithStatus","type","nonce","waitForStatus","Promise","all","generateNonce","Math","round","random","eventsOfType","nextEventOfType","statusEventsWithNonce","singleStatusEvent","mapErrorAndValue","status","SwPush","subscriptionChanges","Subject","messages","pushManager","workerDrivenSubscriptions","pm","getSubscription","sub","subscription","merge","requestSubscription","_this","pushOptions","userVisibleOnly","key","atob","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","charCodeAt","subscribe","subscribeOnce","next","unsubscribe","success","unsubscribeOnce","decorators","Injectable","ctorParameters","SwUpdate","available","activated","checkForUpdate","statusNonce","activateUpdate","SCRIPT","InjectionToken","OPTS","ServiceWorkerModule","opts","ngModule","providers","provide","useValue","useFactory","APP_INITIALIZER","deps","Injector","multi","NgModule","args","ɵe","ɵb","ɵa","ɵc","ɵd","defineProperty","value"],"mappings":"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","file":"/home/sarunint/dev/angular/dist/packages-dist/service-worker/bundles/service-worker.umd.min.js","sourcesContent":["/**\n * @license Angular v5.1.0-beta.1-69c53c3e03\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/filter'), require('rxjs/operator/take'), require('rxjs/operator/toPromise'), require('rxjs/observable/concat'), require('rxjs/observable/defer'), require('rxjs/observable/fromEvent'), require('rxjs/observable/of'), require('rxjs/observable/throw'), require('rxjs/operator/do'), require('rxjs/operator/map'), require('rxjs/operator/publish'), require('rxjs/operator/switchMap'), require('rxjs/Subject'), require('rxjs/observable/merge')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/filter', 'rxjs/operator/take', 'rxjs/operator/toPromise', 'rxjs/observable/concat', 'rxjs/observable/defer', 'rxjs/observable/fromEvent', 'rxjs/observable/of', 'rxjs/observable/throw', 'rxjs/operator/do', 'rxjs/operator/map', 'rxjs/operator/publish', 'rxjs/operator/switchMap', 'rxjs/Subject', 'rxjs/observable/merge'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.serviceWorker = {}),global.ng.core,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable));\n}(this, (function (exports,_angular_core,rxjs_operator_filter,rxjs_operator_take,rxjs_operator_toPromise,rxjs_observable_concat,rxjs_observable_defer,rxjs_observable_fromEvent,rxjs_observable_of,rxjs_observable_throw,rxjs_operator_do,rxjs_operator_map,rxjs_operator_publish,rxjs_operator_switchMap,rxjs_Subject,rxjs_observable_merge) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\n/**\n * @license Angular v5.1.0-beta.1-69c53c3e03\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERR_SW_NOT_SUPPORTED = 'Service workers are not supported by this browser';\n/**\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\n/**\n * @param {?} message\n * @return {?}\n */\nfunction errorObservable(message) {\n    return rxjs_observable_defer.defer(function () { return rxjs_observable_throw._throw(new Error(message)); });\n}\n/**\n * \\@experimental\n */\nvar NgswCommChannel = /** @class */ (function () {\n    function NgswCommChannel(serviceWorker) {\n        if (!serviceWorker) {\n            this.worker = this.events = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            var /** @type {?} */ controllerChangeEvents = /** @type {?} */ ((rxjs_observable_fromEvent.fromEvent(serviceWorker, 'controllerchange')));\n            var /** @type {?} */ controllerChanges = /** @type {?} */ ((rxjs_operator_map.map.call(controllerChangeEvents, function () { return serviceWorker.controller; })));\n            var /** @type {?} */ currentController = /** @type {?} */ ((rxjs_observable_defer.defer(function () { return rxjs_observable_of.of(serviceWorker.controller); })));\n            var /** @type {?} */ controllerWithChanges = /** @type {?} */ ((rxjs_observable_concat.concat(currentController, controllerChanges)));\n            this.worker = /** @type {?} */ ((rxjs_operator_filter.filter.call(controllerWithChanges, function (c) { return !!c; })));\n            this.registration = /** @type {?} */ ((rxjs_operator_switchMap.switchMap.call(this.worker, function () { return serviceWorker.getRegistration(); })));\n            var /** @type {?} */ rawEvents = rxjs_observable_fromEvent.fromEvent(serviceWorker, 'message');\n            var /** @type {?} */ rawEventPayload = /** @type {?} */ ((rxjs_operator_map.map.call(rawEvents, function (event) { return event.data; })));\n            var /** @type {?} */ eventsUnconnected = /** @type {?} */ ((rxjs_operator_filter.filter.call(rawEventPayload, function (event) { return !!event && !!(/** @type {?} */ (event))['type']; })));\n            var /** @type {?} */ events = /** @type {?} */ ((rxjs_operator_publish.publish.call(eventsUnconnected)));\n            this.events = events;\n            events.connect();\n        }\n    }\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    NgswCommChannel.prototype.postMessage = /**\n     * \\@internal\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    function (action, payload) {\n        var /** @type {?} */ worker = rxjs_operator_take.take.call(this.worker, 1);\n        var /** @type {?} */ sideEffect = rxjs_operator_do._do.call(worker, function (sw) {\n            sw.postMessage(__assign({ action: action }, payload));\n        });\n        return /** @type {?} */ ((rxjs_operator_toPromise.toPromise.call(sideEffect).then(function () { return undefined; })));\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    NgswCommChannel.prototype.postMessageWithStatus = /**\n     * \\@internal\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    function (type, payload, nonce) {\n        var /** @type {?} */ waitForStatus = this.waitForStatus(nonce);\n        var /** @type {?} */ postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(function () { return undefined; });\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgswCommChannel.prototype.generateNonce = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return Math.round(Math.random() * 10000000); };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    NgswCommChannel.prototype.eventsOfType = /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return /** @type {?} */ ((rxjs_operator_filter.filter.call(this.events, function (event) { return event.type === type; })));\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    NgswCommChannel.prototype.nextEventOfType = /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return /** @type {?} */ ((rxjs_operator_take.take.call(this.eventsOfType(type), 1)));\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} nonce\n     * @return {?}\n     */\n    NgswCommChannel.prototype.waitForStatus = /**\n     * \\@internal\n     * @param {?} nonce\n     * @return {?}\n     */\n    function (nonce) {\n        var /** @type {?} */ statusEventsWithNonce = /** @type {?} */ ((rxjs_operator_filter.filter.call(this.eventsOfType('STATUS'), function (event) { return event.nonce === nonce; })));\n        var /** @type {?} */ singleStatusEvent = /** @type {?} */ ((rxjs_operator_take.take.call(statusEventsWithNonce, 1)));\n        var /** @type {?} */ mapErrorAndValue = /** @type {?} */ ((rxjs_operator_map.map.call(singleStatusEvent, function (event) {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error(/** @type {?} */ ((event.error)));\n        })));\n        return rxjs_operator_toPromise.toPromise.call(mapErrorAndValue);\n    };\n    return NgswCommChannel;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * \\@experimental\n */\nvar SwPush = /** @class */ (function () {\n    function SwPush(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new rxjs_Subject.Subject();\n        this.messages =\n            rxjs_operator_map.map.call(this.sw.eventsOfType('PUSH'), function (message) { return message.data; });\n        this.pushManager = /** @type {?} */ ((rxjs_operator_map.map.call(this.sw.registration, function (registration) { return registration.pushManager; })));\n        var /** @type {?} */ workerDrivenSubscriptions = /** @type {?} */ ((rxjs_operator_switchMap.switchMap.call(this.pushManager, function (pm) { return pm.getSubscription().then(function (sub) { return sub; }); })));\n        this.subscription = rxjs_observable_merge.merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    SwPush.prototype.requestSubscription = /**\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        var _this = this;\n        var /** @type {?} */ pushOptions = { userVisibleOnly: true };\n        var /** @type {?} */ key = atob(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        var /** @type {?} */ applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (var /** @type {?} */ i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        var /** @type {?} */ subscribe = /** @type {?} */ ((rxjs_operator_switchMap.switchMap.call(this.pushManager, function (pm) { return pm.subscribe(pushOptions); })));\n        var /** @type {?} */ subscribeOnce = rxjs_operator_take.take.call(subscribe, 1);\n        return (/** @type {?} */ (rxjs_operator_toPromise.toPromise.call(subscribeOnce))).then(function (sub) {\n            _this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SwPush.prototype.unsubscribe = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ unsubscribe = rxjs_operator_switchMap.switchMap.call(this.subscription, function (sub) {\n            if (sub !== null) {\n                return sub.unsubscribe().then(function (success) {\n                    if (success) {\n                        _this.subscriptionChanges.next(null);\n                        return undefined;\n                    }\n                    else {\n                        throw new Error('Unsubscribe failed!');\n                    }\n                });\n            }\n            else {\n                throw new Error('Not subscribed to push notifications.');\n            }\n        });\n        var /** @type {?} */ unsubscribeOnce = rxjs_operator_take.take.call(unsubscribe, 1);\n        return /** @type {?} */ (rxjs_operator_toPromise.toPromise.call(unsubscribeOnce));\n    };\n    SwPush.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    SwPush.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwPush;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * \\@experimental\n */\nvar SwUpdate = /** @class */ (function () {\n    function SwUpdate(sw) {\n        this.sw = sw;\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    /**\n     * @return {?}\n     */\n    SwUpdate.prototype.checkForUpdate = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce: statusNonce }, statusNonce);\n    };\n    /**\n     * @return {?}\n     */\n    SwUpdate.prototype.activateUpdate = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce: statusNonce }, statusNonce);\n    };\n    SwUpdate.decorators = [\n        { type: _angular_core.Injectable },\n    ];\n    /** @nocollapse */\n    SwUpdate.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwUpdate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SCRIPT = new _angular_core.InjectionToken('NGSW_REGISTER_SCRIPT');\nvar OPTS = new _angular_core.InjectionToken('NGSW_REGISTER_OPTIONS');\n/**\n * @param {?} injector\n * @param {?} script\n * @param {?} options\n * @return {?}\n */\nfunction ngswAppInitializer(injector, script, options) {\n    var /** @type {?} */ initializer = function () {\n        var /** @type {?} */ app = injector.get(_angular_core.ApplicationRef);\n        if (!('serviceWorker' in navigator)) {\n            return;\n        }\n        var /** @type {?} */ onStable = /** @type {?} */ (rxjs_operator_filter.filter.call(app.isStable, function (stable) { return !!stable; }));\n        var /** @type {?} */ isStable = /** @type {?} */ (rxjs_operator_take.take.call(onStable, 1));\n        var /** @type {?} */ whenStable = /** @type {?} */ (rxjs_operator_toPromise.toPromise.call(isStable));\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(function () { return navigator.serviceWorker.register(script, options); });\n    };\n    return initializer;\n}\n/**\n * @return {?}\n */\nfunction ngswCommChannelFactory() {\n    return new NgswCommChannel(navigator.serviceWorker);\n}\n/**\n * \\@experimental\n */\nvar ServiceWorkerModule = /** @class */ (function () {\n    function ServiceWorkerModule() {\n    }\n    /**\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    ServiceWorkerModule.register = /**\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (script, opts) {\n        if (opts === void 0) { opts = {}; }\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: OPTS, useValue: opts },\n                { provide: NgswCommChannel, useFactory: ngswCommChannelFactory },\n                {\n                    provide: _angular_core.APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [_angular_core.Injector, SCRIPT, OPTS],\n                    multi: true,\n                },\n            ],\n        };\n    };\n    ServiceWorkerModule.decorators = [\n        { type: _angular_core.NgModule, args: [{\n                    providers: [SwPush, SwUpdate],\n                },] },\n    ];\n    /** @nocollapse */\n    ServiceWorkerModule.ctorParameters = function () { return []; };\n    return ServiceWorkerModule;\n}());\n\nexports.ServiceWorkerModule = ServiceWorkerModule;\nexports.SwPush = SwPush;\nexports.SwUpdate = SwUpdate;\nexports.ɵe = NgswCommChannel;\nexports.ɵb = OPTS;\nexports.ɵa = SCRIPT;\nexports.ɵc = ngswAppInitializer;\nexports.ɵd = ngswCommChannelFactory;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=service-worker.umd.js.map\n"]}