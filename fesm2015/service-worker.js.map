{"version":3,"file":"service-worker.js","sources":["../../../packages/service-worker/src/low_level.js","../../../packages/service-worker/src/push.js","../../../packages/service-worker/src/update.js","../../../packages/service-worker/src/module.js","../../../packages/service-worker/src/index.js","../../../packages/service-worker/public_api.js","../../../packages/service-worker/service-worker.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { concat, defer, fromEvent, of, throwError } from 'rxjs';\nimport { filter, map, publish, switchMap, take, tap } from 'rxjs/operators';\n/** @type {?} */\nexport const ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n/**\n * An event emitted when a new version of the app is available.\n *\n * \\@publicApi\n * @record\n */\nexport function UpdateAvailableEvent() { }\n/** @type {?} */\nUpdateAvailableEvent.prototype.type;\n/** @type {?} */\nUpdateAvailableEvent.prototype.current;\n/** @type {?} */\nUpdateAvailableEvent.prototype.available;\n/**\n * An event emitted when a new version of the app has been downloaded and activated.\n *\n * \\@publicApi\n * @record\n */\nexport function UpdateActivatedEvent() { }\n/** @type {?} */\nUpdateActivatedEvent.prototype.type;\n/** @type {?|undefined} */\nUpdateActivatedEvent.prototype.previous;\n/** @type {?} */\nUpdateActivatedEvent.prototype.current;\n/**\n * An event emitted when a `PushEvent` is received by the service worker.\n * @record\n */\nexport function PushEvent() { }\n/** @type {?} */\nPushEvent.prototype.type;\n/** @type {?} */\nPushEvent.prototype.data;\n/** @typedef {?} */\nvar IncomingEvent;\nexport { IncomingEvent };\n/**\n * @record\n */\nexport function TypedEvent() { }\n/** @type {?} */\nTypedEvent.prototype.type;\n/**\n * @record\n */\nfunction StatusEvent() { }\n/** @type {?} */\nStatusEvent.prototype.type;\n/** @type {?} */\nStatusEvent.prototype.nonce;\n/** @type {?} */\nStatusEvent.prototype.status;\n/** @type {?|undefined} */\nStatusEvent.prototype.error;\n/**\n * @param {?} message\n * @return {?}\n */\nfunction errorObservable(message) {\n    return defer(() => throwError(new Error(message)));\n}\n/**\n * \\@publicApi\n */\nexport class NgswCommChannel {\n    /**\n     * @param {?} serviceWorker\n     */\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            /** @type {?} */\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            /** @type {?} */\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n            /** @type {?} */\n            const currentController = defer(() => of(serviceWorker.controller));\n            /** @type {?} */\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter(c => !!c));\n            this.registration = /** @type {?} */ ((this.worker.pipe(switchMap(() => serviceWorker.getRegistration()))));\n            /** @type {?} */\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            /** @type {?} */\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\n            /** @type {?} */\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n            /** @type {?} */\n            const events = /** @type {?} */ (eventsUnconnected.pipe(publish()));\n            events.connect();\n            this.events = events;\n        }\n    }\n    /**\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((sw) => {\n            sw.postMessage(Object.assign({ action }, payload));\n        }))\n            .toPromise()\n            .then(() => undefined);\n    }\n    /**\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    postMessageWithStatus(type, payload, nonce) {\n        /** @type {?} */\n        const waitForStatus = this.waitForStatus(nonce);\n        /** @type {?} */\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(() => undefined);\n    }\n    /**\n     * @return {?}\n     */\n    generateNonce() { return Math.round(Math.random() * 10000000); }\n    /**\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    eventsOfType(type) {\n        /** @type {?} */\n        const filterFn = (event) => event.type === type;\n        return this.events.pipe(filter(filterFn));\n    }\n    /**\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    /**\n     * @param {?} nonce\n     * @return {?}\n     */\n    waitForStatus(nonce) {\n        return this.eventsOfType('STATUS')\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error(/** @type {?} */ ((event.error)));\n        }))\n            .toPromise();\n    }\n    /**\n     * @return {?}\n     */\n    get isEnabled() { return !!this.serviceWorker; }\n}\nif (false) {\n    /** @type {?} */\n    NgswCommChannel.prototype.worker;\n    /** @type {?} */\n    NgswCommChannel.prototype.registration;\n    /** @type {?} */\n    NgswCommChannel.prototype.events;\n    /** @type {?} */\n    NgswCommChannel.prototype.serviceWorker;\n}\n//# sourceMappingURL=low_level.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { NEVER, Subject, merge } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { ERR_SW_NOT_SUPPORTED, NgswCommChannel } from './low_level';\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * \\@publicApi\n */\nexport class SwPush {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n        /** @type {?} */\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     * @return {?}\n     */\n    get isEnabled() { return this.sw.isEnabled; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const pushOptions = { userVisibleOnly: true };\n        /** @type {?} */\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        /** @type {?} */\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n            .toPromise()\n            .then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const doUnsubscribe = (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then(success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            });\n        };\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    decodeBase64(input) { return atob(input); }\n}\nSwPush.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nSwPush.ctorParameters = () => [\n    { type: NgswCommChannel }\n];\nif (false) {\n    /**\n     * Emits the payloads of the received push notification messages.\n     * @type {?}\n     */\n    SwPush.prototype.messages;\n    /**\n     * Emits the payloads of the received push notification messages as well as the action the user\n     * interacted with. If no action was used the action property will be an empty string `''`.\n     *\n     * Note that the `notification` property is **not** a [Notification][Mozilla Notification] object\n     * but rather a\n     * [NotificationOptions](https://notifications.spec.whatwg.org/#dictdef-notificationoptions)\n     * object that also includes the `title` of the [Notification][Mozilla Notification] object.\n     *\n     * [Mozilla Notification]: https://developer.mozilla.org/en-US/docs/Web/API/Notification\n     * @type {?}\n     */\n    SwPush.prototype.notificationClicks;\n    /**\n     * Emits the currently active\n     * [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n     * associated to the Service Worker registration or `null` if there is no subscription.\n     * @type {?}\n     */\n    SwPush.prototype.subscription;\n    /** @type {?} */\n    SwPush.prototype.pushManager;\n    /** @type {?} */\n    SwPush.prototype.subscriptionChanges;\n    /** @type {?} */\n    SwPush.prototype.sw;\n}\n//# sourceMappingURL=push.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { NEVER } from 'rxjs';\nimport { ERR_SW_NOT_SUPPORTED, NgswCommChannel } from './low_level';\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * \\@publicApi\n */\nexport class SwUpdate {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.available = NEVER;\n            this.activated = NEVER;\n            return;\n        }\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     * @return {?}\n     */\n    get isEnabled() { return this.sw.isEnabled; }\n    /**\n     * @return {?}\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce }, statusNonce);\n    }\n    /**\n     * @return {?}\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce }, statusNonce);\n    }\n}\nSwUpdate.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nSwUpdate.ctorParameters = () => [\n    { type: NgswCommChannel }\n];\nif (false) {\n    /**\n     * Emits an `UpdateAvailableEvent` event whenever a new app version is available.\n     * @type {?}\n     */\n    SwUpdate.prototype.available;\n    /**\n     * Emits an `UpdateActivatedEvent` event whenever the app has been updated to a new version.\n     * @type {?}\n     */\n    SwUpdate.prototype.activated;\n    /** @type {?} */\n    SwUpdate.prototype.sw;\n}\n//# sourceMappingURL=update.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPlatformBrowser } from '@angular/common';\nimport { APP_INITIALIZER, ApplicationRef, InjectionToken, Injector, NgModule, PLATFORM_ID } from '@angular/core';\nimport { filter, take } from 'rxjs/operators';\nimport { NgswCommChannel } from './low_level';\nimport { SwPush } from './push';\nimport { SwUpdate } from './update';\n/**\n * @abstract\n */\nexport class RegistrationOptions {\n}\nif (false) {\n    /** @type {?} */\n    RegistrationOptions.prototype.scope;\n    /** @type {?} */\n    RegistrationOptions.prototype.enabled;\n}\n/** @type {?} */\nexport const SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\n/**\n * @param {?} injector\n * @param {?} script\n * @param {?} options\n * @param {?} platformId\n * @return {?}\n */\nexport function ngswAppInitializer(injector, script, options, platformId) {\n    /** @type {?} */\n    const initializer = () => {\n        /** @type {?} */\n        const app = injector.get(ApplicationRef);\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        /** @type {?} */\n        const whenStable = app.isStable.pipe(filter((stable) => !!stable), take(1)).toPromise();\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(() => navigator.serviceWorker.register(script, { scope: options.scope }));\n    };\n    return initializer;\n}\n/**\n * @param {?} opts\n * @param {?} platformId\n * @return {?}\n */\nexport function ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * \\@publicApi\n */\nexport class ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: RegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [RegistrationOptions, PLATFORM_ID]\n                },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, RegistrationOptions, PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [SwPush, SwUpdate],\n            },] },\n];\n//# sourceMappingURL=module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { ServiceWorkerModule } from './module';\nexport { SwPush } from './push';\nexport { SwUpdate } from './update';\n//# sourceMappingURL=index.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport { ServiceWorkerModule, SwPush, SwUpdate } from './src/index';\n// This file only reexports content of the `src` folder. Keep it that way.\n//# sourceMappingURL=public_api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ServiceWorkerModule, SwPush, SwUpdate } from './public_api';\nexport { NgswCommChannel as ɵa } from './src/low_level';\nexport { RegistrationOptions as ɵb, SCRIPT as ɵc, ngswAppInitializer as ɵd, ngswCommChannelFactory as ɵe } from './src/module';\n//# sourceMappingURL=service-worker.js.map"],"names":[],"mappings":"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"}