{"version":3,"file":"module.js","sourceRoot":"","sources":["../../../../packages/service-worker/src/module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformBrowser} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationRef, InjectionToken, Injector, ModuleWithProviders, NgModule, PLATFORM_ID} from '@angular/core';\nimport {filter, take} from 'rxjs/operators';\n\nimport {NgswCommChannel} from './low_level';\nimport {SwPush} from './push';\nimport {SwUpdate} from './update';\n\nexport abstract class RegistrationOptions {\n  scope?: string;\n  enabled?: boolean;\n}\n\nexport const SCRIPT = new InjectionToken<string>('NGSW_REGISTER_SCRIPT');\n\nexport function ngswAppInitializer(\n    injector: Injector, script: string, options: RegistrationOptions,\n    platformId: string): Function {\n  const initializer = () => {\n    const app = injector.get<ApplicationRef>(ApplicationRef);\n    if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n          options.enabled !== false)) {\n      return;\n    }\n    const whenStable =\n        app.isStable.pipe(filter((stable: boolean) => !!stable), take(1)).toPromise();\n\n    // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({action: 'INITIALIZE'});\n      }\n    });\n\n    // Don't return the Promise, as that will block the application until the SW is registered, and\n    // cause a crash if the SW registration fails.\n    whenStable.then(() => navigator.serviceWorker.register(script, {scope: options.scope}));\n  };\n  return initializer;\n}\n\nexport function ngswCommChannelFactory(\n    opts: RegistrationOptions, platformId: string): NgswCommChannel {\n  return new NgswCommChannel(\n      isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n                                                                undefined);\n}\n\n/**\n * @publicApi\n */\n@NgModule({\n  providers: [SwPush, SwUpdate],\n})\nexport class ServiceWorkerModule {\n  /**\n   * Register the given Angular Service Worker script.\n   *\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\n   * workers are not supported by the browser, and the service worker will not be registered.\n   */\n  static register(script: string, opts: {scope?: string; enabled?: boolean;} = {}):\n      ModuleWithProviders<ServiceWorkerModule> {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [\n        {provide: SCRIPT, useValue: script},\n        {provide: RegistrationOptions, useValue: opts},\n        {\n          provide: NgswCommChannel,\n          useFactory: ngswCommChannelFactory,\n          deps: [RegistrationOptions, PLATFORM_ID]\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: ngswAppInitializer,\n          deps: [Injector, SCRIPT, RegistrationOptions, PLATFORM_ID],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n"]}