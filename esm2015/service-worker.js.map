{"version":3,"file":"service-worker.js","sources":["../../../packages/service-worker/src/low_level.js","../../../packages/service-worker/src/push.js","../../../packages/service-worker/src/update.js","../../../packages/service-worker/src/module.js","../../../packages/service-worker/src/index.js","../../../packages/service-worker/public_api.js","../../../packages/service-worker/service-worker.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { concat as obs_concat } from \"rxjs/observable/concat\";\nimport { defer as obs_defer } from \"rxjs/observable/defer\";\nimport { fromEvent as obs_fromEvent } from \"rxjs/observable/fromEvent\";\nimport { of as obs_of } from \"rxjs/observable/of\";\nimport { _throw as obs_throw } from \"rxjs/observable/throw\";\nimport { _do as op_do } from \"rxjs/operator/do\";\nimport { filter as op_filter } from \"rxjs/operator/filter\";\nimport { map as op_map } from \"rxjs/operator/map\";\nimport { publish as op_publish } from \"rxjs/operator/publish\";\nimport { switchMap as op_switchMap } from \"rxjs/operator/switchMap\";\nimport { take as op_take } from \"rxjs/operator/take\";\nimport { toPromise as op_toPromise } from \"rxjs/operator/toPromise\";\nconst /** @type {?} */ ERR_SW_NOT_SUPPORTED = 'Service workers are not supported by this browser';\n/**\n * @record\n */\nexport function Version() { }\nfunction Version_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Version.prototype.hash;\n    /** @type {?|undefined} */\n    Version.prototype.appData;\n}\n/**\n * \\@experimental\n * @record\n */\nexport function UpdateAvailableEvent() { }\nfunction UpdateAvailableEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpdateAvailableEvent.prototype.type;\n    /** @type {?} */\n    UpdateAvailableEvent.prototype.current;\n    /** @type {?} */\n    UpdateAvailableEvent.prototype.available;\n}\n/**\n * \\@experimental\n * @record\n */\nexport function UpdateActivatedEvent() { }\nfunction UpdateActivatedEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpdateActivatedEvent.prototype.type;\n    /** @type {?|undefined} */\n    UpdateActivatedEvent.prototype.previous;\n    /** @type {?} */\n    UpdateActivatedEvent.prototype.current;\n}\n/**\n * @record\n */\nfunction TypedEvent() { }\nfunction TypedEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TypedEvent.prototype.type;\n}\n/**\n * @record\n */\nfunction StatusEvent() { }\nfunction StatusEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StatusEvent.prototype.type;\n    /** @type {?} */\n    StatusEvent.prototype.nonce;\n    /** @type {?} */\n    StatusEvent.prototype.status;\n    /** @type {?|undefined} */\n    StatusEvent.prototype.error;\n}\n/**\n * @param {?} message\n * @return {?}\n */\nfunction errorObservable(message) {\n    return obs_defer(() => obs_throw(new Error(message)));\n}\n/**\n * \\@experimental\n */\nexport class NgswCommChannel {\n    /**\n     * @param {?} serviceWorker\n     */\n    constructor(serviceWorker) {\n        if (!serviceWorker) {\n            this.worker = this.events = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            const /** @type {?} */ controllerChangeEvents = /** @type {?} */ ((obs_fromEvent(serviceWorker, 'controllerchange')));\n            const /** @type {?} */ controllerChanges = /** @type {?} */ ((op_map.call(controllerChangeEvents, () => serviceWorker.controller)));\n            const /** @type {?} */ currentController = /** @type {?} */ ((obs_defer(() => obs_of(serviceWorker.controller))));\n            const /** @type {?} */ controllerWithChanges = /** @type {?} */ ((obs_concat(currentController, controllerChanges)));\n            this.worker = /** @type {?} */ ((op_filter.call(controllerWithChanges, (c) => !!c)));\n            this.registration = /** @type {?} */ ((op_switchMap.call(this.worker, () => serviceWorker.getRegistration())));\n            const /** @type {?} */ rawEvents = obs_fromEvent(serviceWorker, 'message');\n            const /** @type {?} */ rawEventPayload = /** @type {?} */ ((op_map.call(rawEvents, (event) => event.data)));\n            const /** @type {?} */ eventsUnconnected = /** @type {?} */ ((op_filter.call(rawEventPayload, (event) => !!event && !!(/** @type {?} */ (event))['type'])));\n            const /** @type {?} */ events = /** @type {?} */ ((op_publish.call(eventsUnconnected)));\n            this.events = events;\n            events.connect();\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    postMessage(action, payload) {\n        const /** @type {?} */ worker = op_take.call(this.worker, 1);\n        const /** @type {?} */ sideEffect = op_do.call(worker, (sw) => {\n            sw.postMessage(Object.assign({ action }, payload));\n        });\n        return /** @type {?} */ ((op_toPromise.call(sideEffect).then(() => undefined)));\n    }\n    /**\n     * \\@internal\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    postMessageWithStatus(type, payload, nonce) {\n        const /** @type {?} */ waitForStatus = this.waitForStatus(nonce);\n        const /** @type {?} */ postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(() => undefined);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    generateNonce() { return Math.round(Math.random() * 10000000); }\n    /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    eventsOfType(type) {\n        return /** @type {?} */ ((op_filter.call(this.events, (event) => { return event.type === type; })));\n    }\n    /**\n     * \\@internal\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    nextEventOfType(type) {\n        return /** @type {?} */ ((op_take.call(this.eventsOfType(type), 1)));\n    }\n    /**\n     * \\@internal\n     * @param {?} nonce\n     * @return {?}\n     */\n    waitForStatus(nonce) {\n        const /** @type {?} */ statusEventsWithNonce = /** @type {?} */ ((op_filter.call(this.eventsOfType('STATUS'), (event) => event.nonce === nonce)));\n        const /** @type {?} */ singleStatusEvent = /** @type {?} */ ((op_take.call(statusEventsWithNonce, 1)));\n        const /** @type {?} */ mapErrorAndValue = /** @type {?} */ ((op_map.call(singleStatusEvent, (event) => {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error(/** @type {?} */ ((event.error)));\n        })));\n        return op_toPromise.call(mapErrorAndValue);\n    }\n}\nfunction NgswCommChannel_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgswCommChannel.prototype.worker;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgswCommChannel.prototype.registration;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgswCommChannel.prototype.events;\n}\n//# sourceMappingURL=low_level.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs/Subject\";\nimport { merge as obs_merge } from \"rxjs/observable/merge\";\nimport { map as op_map } from \"rxjs/operator/map\";\nimport { switchMap as op_switchMap } from \"rxjs/operator/switchMap\";\nimport { take as op_take } from \"rxjs/operator/take\";\nimport { toPromise as op_toPromise } from \"rxjs/operator/toPromise\";\nimport { NgswCommChannel } from \"./low_level\";\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * \\@experimental\n */\nexport class SwPush {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        this.messages =\n            op_map.call(this.sw.eventsOfType('PUSH'), (message) => message.data);\n        this.pushManager = /** @type {?} */ ((op_map.call(this.sw.registration, (registration) => { return registration.pushManager; })));\n        const /** @type {?} */ workerDrivenSubscriptions = /** @type {?} */ ((op_switchMap.call(this.pushManager, (pm) => pm.getSubscription().then(sub => { return sub; }))));\n        this.subscription = obs_merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    requestSubscription(options) {\n        const /** @type {?} */ pushOptions = { userVisibleOnly: true };\n        let /** @type {?} */ key = atob(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        let /** @type {?} */ applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let /** @type {?} */ i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        const /** @type {?} */ subscribe = /** @type {?} */ ((op_switchMap.call(this.pushManager, (pm) => pm.subscribe(pushOptions))));\n        const /** @type {?} */ subscribeOnce = op_take.call(subscribe, 1);\n        return (/** @type {?} */ (op_toPromise.call(subscribeOnce))).then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribe() {\n        const /** @type {?} */ unsubscribe = op_switchMap.call(this.subscription, (sub) => {\n            if (sub !== null) {\n                return sub.unsubscribe().then(success => {\n                    if (success) {\n                        this.subscriptionChanges.next(null);\n                        return undefined;\n                    }\n                    else {\n                        throw new Error('Unsubscribe failed!');\n                    }\n                });\n            }\n            else {\n                throw new Error('Not subscribed to push notifications.');\n            }\n        });\n        const /** @type {?} */ unsubscribeOnce = op_take.call(unsubscribe, 1);\n        return /** @type {?} */ (op_toPromise.call(unsubscribeOnce));\n    }\n}\nSwPush.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nSwPush.ctorParameters = () => [\n    { type: NgswCommChannel, },\n];\nfunction SwPush_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    SwPush.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    SwPush.ctorParameters;\n    /** @type {?} */\n    SwPush.prototype.messages;\n    /** @type {?} */\n    SwPush.prototype.subscription;\n    /** @type {?} */\n    SwPush.prototype.pushManager;\n    /** @type {?} */\n    SwPush.prototype.subscriptionChanges;\n    /** @type {?} */\n    SwPush.prototype.sw;\n}\n//# sourceMappingURL=push.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from \"@angular/core\";\nimport { NgswCommChannel } from \"./low_level\";\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * \\@experimental\n */\nexport class SwUpdate {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    /**\n     * @return {?}\n     */\n    checkForUpdate() {\n        const /** @type {?} */ statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce }, statusNonce);\n    }\n    /**\n     * @return {?}\n     */\n    activateUpdate() {\n        const /** @type {?} */ statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce }, statusNonce);\n    }\n}\nSwUpdate.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nSwUpdate.ctorParameters = () => [\n    { type: NgswCommChannel, },\n];\nfunction SwUpdate_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    SwUpdate.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    SwUpdate.ctorParameters;\n    /** @type {?} */\n    SwUpdate.prototype.available;\n    /** @type {?} */\n    SwUpdate.prototype.activated;\n    /** @type {?} */\n    SwUpdate.prototype.sw;\n}\n//# sourceMappingURL=update.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_INITIALIZER, ApplicationRef, InjectionToken, Injector, NgModule } from \"@angular/core\";\nimport { filter as op_filter } from \"rxjs/operator/filter\";\nimport { take as op_take } from \"rxjs/operator/take\";\nimport { toPromise as op_toPromise } from \"rxjs/operator/toPromise\";\nimport { NgswCommChannel } from \"./low_level\";\nimport { SwPush } from \"./push\";\nimport { SwUpdate } from \"./update\";\nexport const /** @type {?} */ SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\nexport const /** @type {?} */ OPTS = new InjectionToken('NGSW_REGISTER_OPTIONS');\n/**\n * @param {?} injector\n * @param {?} script\n * @param {?} options\n * @return {?}\n */\nexport function ngswAppInitializer(injector, script, options) {\n    const /** @type {?} */ initializer = () => {\n        const /** @type {?} */ app = injector.get(ApplicationRef);\n        if (!('serviceWorker' in navigator)) {\n            return;\n        }\n        const /** @type {?} */ onStable = /** @type {?} */ (op_filter.call(app.isStable, (stable) => !!stable));\n        const /** @type {?} */ isStable = /** @type {?} */ (op_take.call(onStable, 1));\n        const /** @type {?} */ whenStable = /** @type {?} */ (op_toPromise.call(isStable));\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(() => navigator.serviceWorker.register(script, options));\n    };\n    return initializer;\n}\n/**\n * @return {?}\n */\nexport function ngswCommChannelFactory() {\n    return new NgswCommChannel(navigator.serviceWorker);\n}\n/**\n * \\@experimental\n */\nexport class ServiceWorkerModule {\n    /**\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: OPTS, useValue: opts },\n                { provide: NgswCommChannel, useFactory: ngswCommChannelFactory },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, OPTS],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [SwPush, SwUpdate],\n            },] },\n];\n/** @nocollapse */\nServiceWorkerModule.ctorParameters = () => [];\nfunction ServiceWorkerModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ServiceWorkerModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ServiceWorkerModule.ctorParameters;\n}\n//# sourceMappingURL=module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\nexport { ServiceWorkerModule } from \"./module\";\nexport { SwPush } from \"./push\";\nexport { SwUpdate } from \"./update\";\n//# sourceMappingURL=index.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport { ServiceWorkerModule, SwPush, SwUpdate } from \"./src/index\";\n// This file only reexports content of the `src` folder. Keep it that way.\n//# sourceMappingURL=public_api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ServiceWorkerModule, SwPush, SwUpdate } from \"./public_api\";\nexport { NgswCommChannel as ɵe } from \"./src/low_level\";\nexport { OPTS as ɵb, SCRIPT as ɵa, ngswAppInitializer as ɵc, ngswCommChannelFactory as ɵd } from \"./src/module\";\n//# sourceMappingURL=service-worker.js.map"],"names":["obs_defer","obs_throw","obs_fromEvent","op_map","obs_of","obs_concat","op_filter","op_switchMap","op_publish","op_take","op_do","op_toPromise","obs_merge"],"mappings":"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"}