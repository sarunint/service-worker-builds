{"version":3,"file":"duration.js","sourceRoot":"","sources":["../../../../../packages/service-worker/config/src/duration.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,MAAM,cAAc,GAAG,kBAAkB,CAAC;;AAC1C,MAAM,UAAU,GAAG,sBAAsB,CAAC;;;;;AAE1C,MAAM,UAAU,iBAAiB,CAAC,QAAgB;;IAChD,MAAM,OAAO,GAAa,EAAE,CAAC;;IAE7B,IAAI,KAAK,CAAuB;IAChC,OAAO,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAE;QACvD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,OAAO,OAAO;SACT,GAAG,CAAC,KAAK,CAAC,EAAE;;QACX,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,GAAG,KAAK,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,KAAK,EAAE,CAAC,CAAC;SACnD;;QACD,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE;YACd,KAAK,GAAG;gBACN,MAAM,GAAG,QAAQ,CAAC;gBAClB,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,OAAO,CAAC;gBACjB,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,KAAK,CAAC;gBACf,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,IAAI,CAAC;gBACd,MAAM;YACR,KAAK,GAAG;gBACN,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SAC3D;QACD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;KAClC,CAAC;SACD,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;CACjD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst PARSE_TO_PAIRS = /([0-9]+[^0-9]+)/g;\nconst PAIR_SPLIT = /^([0-9]+)([dhmsu]+)$/;\n\nexport function parseDurationToMs(duration: string): number {\n  const matches: string[] = [];\n\n  let array: RegExpExecArray|null;\n  while ((array = PARSE_TO_PAIRS.exec(duration)) !== null) {\n    matches.push(array[0]);\n  }\n  return matches\n      .map(match => {\n        const res = PAIR_SPLIT.exec(match);\n        if (res === null) {\n          throw new Error(`Not a valid duration: ${match}`);\n        }\n        let factor: number = 0;\n        switch (res[2]) {\n          case 'd':\n            factor = 86400000;\n            break;\n          case 'h':\n            factor = 3600000;\n            break;\n          case 'm':\n            factor = 60000;\n            break;\n          case 's':\n            factor = 1000;\n            break;\n          case 'u':\n            factor = 1;\n            break;\n          default:\n            throw new Error(`Not a valid duration unit: ${res[2]}`);\n        }\n        return parseInt(res[1]) * factor;\n      })\n      .reduce((total, value) => total + value, 0);\n}\n"]}